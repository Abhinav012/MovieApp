//
//  SearchedMoviesViewController.swift
//  MovieApp
//
//  Created by Thanos on 24/01/20.
//  Copyright (c) 2020 Thanos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchedMoviesDisplayLogic: class
{
  func displayMovies(pageCount: Int, movies: [Movie])
}

class SearchedMoviesViewController: UIViewController, SearchedMoviesDisplayLogic
{
  var interactor: SearchedMoviesBusinessLogic?
  var router: (NSObjectProtocol & SearchedMoviesRoutingLogic & SearchedMoviesDataPassing)?
    
    var apiManager = APIManager()
    var searchedMovies = [Movie]()
    var didSelectedMovie: Bool = false
    var didDisplayedDetailedResults: Bool = false
    var pageCount = 1
    var moviesScrolledCount = -1
    var pageEndReached = false
    var totalPageCount = 0
    var searchText = ""
    
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var searchTableView: UITableView!
    
    @IBOutlet weak var searchMoviesLabel: UILabel!

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SearchedMoviesInteractor()
    let presenter = SearchedMoviesPresenter()
    let router = SearchedMoviesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
  }
    
  override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        searchTableView.keyboardDismissMode = .interactive
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = SearchedMovies.Something.Request()
    
  }
  
    func displayMovies(pageCount: Int, movies: [Movie]){
    self.totalPageCount = pageCount
    
        if self.pageCount == 1{
            self.searchedMovies = movies
        }
        else {
            self.searchedMovies += movies
        }
        
        DispatchQueue.main.async {
            self.searchTableView.reloadData()
        }
  }
}

extension SearchedMoviesViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return searchedMovies.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        moviesScrolledCount = indexPath.row+1
        
        if indexPath.row == searchedMovies.count-1{
            pageEndReached = true
        }
        
        if didSelectedMovie{
            
            let cell = tableView.dequeueReusableCell(withIdentifier: "searchedMoviesDetailCell", for: indexPath) as! SearchedResultTableViewCell
            let movie = searchedMovies[indexPath.row]
            
            if let _ = movie.originalTitle, let _ = movie.popularity, let _ = movie.releaseDate, let _ = movie.voteCount{
                cell.originalTitle.text = movie.originalTitle!
                cell.popularity.text = "popularity: \(movie.popularity!)"
                cell.releaseDate.text = "Release Date: \(movie.releaseDate!)"
                cell.voteCount.text = "vote count: \(movie.voteCount!)"
            }
            if let _ = movie.posterPath {
                cell.posterImageView.sd_setImage(with: URL(string: imagDwldBaseURL+movie.posterPath!), completed: nil)
            }
            
            if let _ = movie.backdropPath{
                cell.backDropPathImageView.sd_setImage(with: URL(string: imagDwldBaseURL+movie.backdropPath!), completed: nil)
            }
            
            didDisplayedDetailedResults = true
            
            return cell
        }
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "searchResultCell", for: indexPath)
        cell.textLabel?.text = searchedMovies[indexPath.row].title
        
        didDisplayedDetailedResults = false
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if didDisplayedDetailedResults{
            router?.movie = searchedMovies[indexPath.row]
            router?.routeToDetailViewController()
        }
        else{
            didSelectedMovie = true
            
            let movie = searchedMovies[0]
            searchedMovies[0] = searchedMovies[indexPath.row]
            searchedMovies[indexPath.row] = movie
            searchBar.resignFirstResponder()
            tableView.reloadData()
            tableView.scrollToRow(at: IndexPath(row: 0, section: 0), at: .top, animated: true)
        }
        
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if indexPath.row == searchedMovies.count-11{
            pageCount = pageCount + 1
            
            if pageCount <= totalPageCount && pageCount != 1{
                //fetchSearchData(searchText: self.searchText, pageCount: pageCount)
                interactor?.doSomething(searchText: searchText, pageCount: self.pageCount)
            }
        }
        
    }
    
}

extension SearchedMoviesViewController: UISearchBarDelegate{
    
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        
        searchBar.showsCancelButton = true
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        
        didSelectedMovie = false
        
        if searchText == ""{
            searchBar.showsCancelButton = false
        }
        else{
            searchBar.showsCancelButton = true
        }
        
        
        if searchText.count >= 3{
            
            searchMoviesLabel.isHidden = true
            self.pageCount = 1
            self.searchText = searchText
            interactor?.doSomething(searchText: searchText, pageCount: self.pageCount)
            //fetchSearchData(searchText: searchText, pageCount: self.pageCount)
            
        }else{
            
            searchMoviesLabel.isHidden = false
            self.searchedMovies = [Movie]()
            DispatchQueue.main.async {
                self.searchTableView.separatorStyle = .none
                self.searchTableView.reloadData()
            }
        }
        
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.showsCancelButton = false
        searchBar.resignFirstResponder()
        searchBar.text = ""
        self.searchedMovies = [Movie]()
        searchMoviesLabel.isHidden = false
        DispatchQueue.main.async {
            self.searchTableView.separatorStyle = .none
            self.searchTableView.reloadData()
        }
    }
}


