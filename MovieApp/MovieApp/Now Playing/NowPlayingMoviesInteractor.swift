//
//  NowPlayingMoviesInteractor.swift
//  MovieApp
//
//  Created by Thanos on 23/01/20.
//  Copyright (c) 2020 Thanos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NowPlayingMoviesBusinessLogic
{
  func doSomething(request: NowPlayingMovies.Something.Request)
  func callAPI(with page: Int, category: MovieCategory)
}

protocol NowPlayingMoviesDataStore
{
  //var name: String { get set }
}

class NowPlayingMoviesInteractor: NowPlayingMoviesBusinessLogic, NowPlayingMoviesDataStore
{
  var presenter: NowPlayingMoviesPresentationLogic?
  var worker: NowPlayingMoviesWorker?
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: NowPlayingMovies.Something.Request)
  {
    worker = NowPlayingMoviesWorker()
    worker?.doSomeWork()
    
    let defaults = UserDefaults.standard
    
    if !(defaults.bool(forKey: "didFetchedNowPlayingForFirstTime")){
        defaults.set(true, forKey: "didFetchedNowPlayingForFirstTime")
        worker?.downloadNowPlayingMovies(lang: "en-US", page: 1, category: .nowPlaying, completion2: {
            success in
            if success{
                
                    let response = NowPlayingMovies.Something.Response()
                    self.presenter?.presentSomething(response: response)
                
            }
        })
    }else{
        worker?.fetchMovies(category: .nowPlaying, fetchedMovies: {
            success in
            
            if success {
                let response = NowPlayingMovies.Something.Response()
                self.presenter?.presentSomething(response: response)
            }
        })
    }
    
   // worker?.fetchMoviesImage()
    
    
    
   
  }
   
    func callAPI(with page: Int, category: MovieCategory){
        worker?.downloadNowPlayingMoviesWithoutLag(lang: "en-US", page: page, category: category, completion2: {
            success in
            
            if success
            {
                let response = NowPlayingMovies.Something.Response()
                self.presenter?.presentSomething(response: response)
            }
        })
        //worker?.fetchMoviesImage()
       
        
    
    }
    
    
}
