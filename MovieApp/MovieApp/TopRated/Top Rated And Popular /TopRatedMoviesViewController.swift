//
//  TopRatedMoviesViewController.swift
//  MovieApp
//
//  Created by Thanos on 23/01/20.
//  Copyright (c) 2020 Thanos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TopRatedMoviesDisplayLogic: class
{
  func displaySomething(viewModel: [Movie])
}

class TopRatedMoviesViewController: UIViewController, TopRatedMoviesDisplayLogic
{
  var interactor: TopRatedMoviesBusinessLogic?
  var router: (NSObjectProtocol & TopRatedMoviesRoutingLogic & TopRatedMoviesDataPassing)?

    var topRatedMovies = [Movie]()
    var popularMovies = [Movie]()
    var apiManager = APIManager()
    var databaseManager = DatabaseManager()
    var moviesScrolledCount = 0
    var topRatedMoviesScrollCount = 0
    var pageEndReached = false
    var verticalScrollEndReached = false
    var pageCount = 1
    var popularPageCount = 1
    var defaults = UserDefaults.standard
    
    @IBOutlet weak var topRatedMoviesTableView: UITableView!
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TopRatedMoviesInteractor()
    let presenter = TopRatedMoviesPresenter()
    let router = TopRatedMoviesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = TopRatedMovies.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: [Movie])
  {
    popularMovies = viewModel
    self.topRatedMovies = DatabaseManager.topRatedMovies
    DispatchQueue.main.async {
        self.topRatedMoviesTableView.reloadData()
    }
  }
    override func viewDidLoad() {
        super.viewDidLoad()
         doSomething()

        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.setNavigationBarHidden(true, animated: true)
        
    }
    
    @objc func switchToDetailView(){
        //Only_TopRatedMoviesViewController
        router?.topRatedMovies = topRatedMovies
        router?.pageCount = popularPageCount
        router?.routeToViewController()

    }
    
}

extension TopRatedMoviesViewController: UITableViewDataSource, UITableViewDelegate{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return popularMovies.count + 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        moviesScrolledCount = indexPath.row
        
        if indexPath.row-1 == popularMovies.count-11{
            pageEndReached = true
        }
        
        if indexPath.row != 0{
            let cell = tableView.dequeueReusableCell(withIdentifier: "popularMoviesCell", for: indexPath) as! PopularTableViewCell
            cell.separatorInset = UIEdgeInsets(top: 0, left: 102, bottom: 0, right: 32)
            let movie = popularMovies[indexPath.row-1]
            cell.movieImageView.layer.cornerRadius = 15
            cell.movieImageView.sd_setImage(with: URL(string: imagDwldBaseURL + movie.posterPath!), completed: nil)
            cell.movieTitle.text = movie.originalTitle!
            cell.popularity.text = "popularity: \(movie.popularity!)"
            cell.releaseDate.text = "Release Date: \(movie.releaseDate!)"
            cell.voteCount.text = "vote count: \(movie.voteCount!)"
            
            if indexPath.row != 1{
                cell.movieImageViewTopContraint.constant = 10
                cell.movieTitleTopConstraint.constant = 23
                cell.popularLabel.isHidden = true
            }
            else{
                cell.movieImageViewTopContraint.constant = 59
                cell.movieTitleTopConstraint.constant = 72
                cell.popularLabel.isHidden = false
            }
            
            
            return cell
        }
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "trendingCell", for: indexPath) as! TopRatedTrendingTableViewCell
        cell.trendingMovieCollectionView.reloadData()
        cell.separatorInset = UIEdgeInsets(top: 0, left: 32, bottom: 0, right: 32)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if indexPath.row != 0{
            router?.movie = popularMovies[indexPath.row-1]
            router?.category = .popular
            router?.routeToDetailViewController()
//            let vc = storyboard?.instantiateViewController(withIdentifier: "MovieDetailViewController") as! MovieDetailViewController
//
//            vc.movie = popularMovies[indexPath.row-1]
//            vc.movieCategory = .popular
//            self.navigationController?.pushViewController(vc, animated: true)
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if indexPath.row == 0{
            return 300
        }
        if indexPath.row == 1{
            return 127
        }
        return 80
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        DispatchQueue.global().sync {
            
            if indexPath.row == popularMovies.count-10 {
                pageEndReached = false
                let value: Double = Double((moviesScrolledCount+10)/20)
                if floor(value) == value {
                    popularPageCount = popularPageCount + 1
                }
                
                if popularPageCount != 1 && popularPageCount <= defaults.value(forKey: "popularPageCount") as! Int{
                    print("Page Count: \(popularPageCount)")
                    interactor?.callAPI(with: popularPageCount, category: .popular)
                }
            }
        }
    }
}

extension TopRatedMoviesViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        
        if collectionView.tag == 0{
            return topRatedMovies.count
        }
        
        return 10
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        topRatedMoviesScrollCount = indexPath.row+1
        if indexPath.row == topRatedMovies.count-6{
            verticalScrollEndReached = true
        }
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "topRatedCollectionViewCell", for: indexPath) as! TopRatedCollectionViewCell
        let movie = topRatedMovies[indexPath.row]
        cell.moviePosterImageView.sd_setImage(with: URL(string: imagDwldBaseURL+movie.posterPath!), completed: nil)
        cell.movieDescription.text = movie.overview!
        cell.popularity.text = "popularity: \(movie.popularity!)%"
        cell.title.text = movie.title!
        cell.voteAvg.text = "vote average: \(Float(movie.voteAverage!))"
        cell.voteCount.text = "Vote Count: \(movie.voteCount!)"
        cell.seeAllButton.addTarget(self, action: #selector(switchToDetailView), for: .touchUpInside)
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        router?.category = .topRated
        router?.movie = topRatedMovies[indexPath.row]
        router?.routeToDetailViewController()
        
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        
        return CGSize(width: self.view.frame.width-2*32, height: 270)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 16
    }
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        DispatchQueue.global().sync {
            if indexPath.row == topRatedMovies.count-11 {
                verticalScrollEndReached = false
                let value: Double = Double((topRatedMoviesScrollCount+5)/20)
                if floor(value) == value {
                    pageCount = pageCount + 1
                }
                
                if pageCount != 1 && pageCount <= defaults.value(forKey: "topRatedPageCount") as! Int{
                    
                   interactor?.callAPI(with: pageCount, category: .topRated)
                    
                   // self.apiManager.fetchMovieDetails(lang: "en-US", page: pageCount, category: .topRated)
//                    DatabaseManager.manager.fetchMovieDetails(category: .topRated)
//                    DispatchQueue.main.async{
//                        self.topRatedMovies = DatabaseManager.topRatedMovies
//                        self.topRatedMoviesTableView.reloadData()
//                    }
                }
            }
            
        }
    }
}


